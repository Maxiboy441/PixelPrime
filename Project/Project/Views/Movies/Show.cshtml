@model Project.Models.ViewModels.MovieDetailsViewModel

<div class="container">
    <div class="d-flex flex-column">
        <div class="d-flex flex-column flex-md-row justify-content-md-between align-items-md-start">
            <h1 class="movie-title-container mb-3 mb-md-0">@Model.Movie.Title</h1>
            <div class="d-flex justify-content-between gap-3">
                <h6>@Model.Movie.Year</h6>
                <h6>@Model.Movie.Genre</h6>
                <h6>@Model.Movie.Runtime</h6>
            </div>
        </div>

        <div class="d-flex h-75 mt-3 mb-3 flex-column flex-md-row gap-3">
            <div class="col-12 col-md-3">
                <img src="@(!string.IsNullOrEmpty(Model.Movie.Poster) && Model.Movie.Poster != "N/A" ? Model.Movie.Poster : Url.Content("~/images/poster_not_found.png"))"
                     alt="@Model.Movie.Title"
                     class="img-fluid mx-auto mx-md-0 d-block d-md-inline-block" />
            </div>

            <div class="d-flex flex-column mt-3 mt-md-0 overview-container flex-wrap">
                @await Html.PartialAsync("_MovieOverview",
                Tuple.Create("Overview", @Model.Movie.Plot, "d-flex flex-column gap-2 mb-3"))

                @await Html.PartialAsync("_MovieActorOverview",
                Tuple.Create("Director", @Model.Movie.Director, "d-flex flex-row gap-2"))

                @await Html.PartialAsync("_MovieActorOverview",
                Tuple.Create("Writers", @Model.Movie.Writer, "d-flex flex-row gap-2"))

                @await Html.PartialAsync("_MovieActorOverview",
                Tuple.Create("Actors", @Model.Movie.Actors, "d-flex flex-row gap-2"))

                @await Html.PartialAsync("_MovieOverview",
                Tuple.Create("Language", @Model.Movie.Language, "d-flex flex-row gap-2"))

                @await Html.PartialAsync("_MovieOverview",
                Tuple.Create("Genres", @Model.Movie.Genre, "d-flex flex-row gap-2"))
            </div>
        </div>

        <div class="w-100 d-flex justify-content-between">
            <div class="d-flex flex-row gap-4">
                <div class="d-flex gap-4 flex-wrap gap-4 align-items-start">
                    <div class="d-flex flex-column">
                        <div>
                            @await Html.PartialAsync("_PrimaryButton", Tuple.Create("Rating", "", "btn-without text-light", "type=submit disabled", "button"))

                            @if (Model.HasAverageRating)
                            {
                                <h6 style="margin: 0">
                                    <i class="fa-solid fa-star" style="color: #FFD43B;"></i>
                                    <span class="rate">@Model.AverageRating</span>
                                </h6>
                            }
                            else
                            {
                                <h6>This movie has not yet been rated</h6>
                            }
                        </div>
                    </div>

                    <div class="d-flex flex-column">
                        <div>
                            @await Html.PartialAsync("_RateMovieModal",
                            Tuple.Create(Model.Movie.Id, Model.Movie.Title, Model.Movie.Poster, Model.IsRated ? "Your Rating" : "Rate Movie", Model.IsRated ? "fa-solid fa-pen-to-square" : "fas fa-plus", "btn-without text-light"))
                            <h6 style="margin: 0">
                                @if (Model.UserHasRating)
                                {
                                    <i class="fa-solid fa-star" style="color: #FFD43B;"></i>
                                    <span class="rate">@Model.CurrentUserRating /10</span>
                                }
                            </h6>
                        </div>
                    </div>

                    <div class="d-flex flex-column">
                        @if (Model.IsFavorite)
                        {
                            <form asp-action="DestroyFavoriteMovie" asp-controller="Movies" method="post" class="mb-2">
                                @Html.AntiForgeryToken()
                                @Html.Hidden("id", Model.Movie.Id)
                                <button type="submit" class="btn-without text-light">
                                    Delete from Favorites <i class="fas fa-minus"></i>
                                </button>
                            </form>
                        }
                        else
                        {
                            <form asp-action="StoreFavoriteMovie" asp-controller="Movies" method="post" class="mb-2">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="movieId" value="@Model.Movie.Id" />
                                <input type="hidden" name="title" value="@Model.Movie.Title" />
                                <input type="hidden" name="poster" value="@Model.Movie.Poster" />
                                <button type="submit" class="btn-without text-light">
                                    Add to Favorites <i class="fas fa-plus"></i>
                                </button>
                            </form>
                        }
                    </div>

                    <div class="d-flex flex-column">
                        @if (Model.IsWatchlist)
                        {
                            <form asp-action="DestroyWatchlistMovie" asp-controller="Movies" method="post" class="mb-2">
                                @Html.AntiForgeryToken()
                                @Html.Hidden("id", Model.Movie.Id)
                                <button type="submit" class="btn-without text-light">
                                    Delete from Watchlist <i class="fas fa-minus"></i>
                                </button>
                            </form>
                        }
                        else
                        {
                            <form asp-action="StoreWatchlistMovie" asp-controller="Movies" method="post" class="mb-2">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="movieId" value="@Model.Movie.Id" />
                                <input type="hidden" name="title" value="@Model.Movie.Title" />
                                <input type="hidden" name="poster" value="@Model.Movie.Poster" />
                                <button type="submit" class="btn-without text-light">
                                    Add to Watchlist <i class="fas fa-plus"></i>
                                </button>
                            </form>
                        }
                    </div>
                </div>
            </div>
        </div>

        @* TODO - UNCOMMENT CODE BELOEW WHEN REVIEW CONTROLLER IS MERGED*@

        <div class="d-flex flex-column gap-4">
            <div class="d-flex flex-row gap-4 align-items-center mt-5">
                <h3 class="fw-bold mb-0">User Reviews </h3>
                @if (!Model.UserHasReview)
                {
                    @await Html.PartialAsync("_ReviewPopUpForm", Tuple.Create(Model.Movie.Id, Model.Movie.Title, Model.Movie.Poster, $"/movies/{Model.Movie.Id}/review"))
                }
            </div>

            @if (Model.Reviews == null || !Model.Reviews.Any())
            {
                <p>No reviews available.</p>
            }
            else
            {
                foreach (var review in Model.Reviews)
                {
                    <div class="bg-secondary-color w-100 vh-20 mb-3 p-3 rounded-3">
                        <div class="d-flex flex-row gap-3 mb-3">
                            <div>
                                <i class="fa-regular fa-user user-icon"></i>
                            </div>

                            <div class="d-flex flex-column gap-2">
                                <h3 class="fw-bold mb-0">@review.Title</h3>
                                <p class="mb-0">Written by: @review.User.Name on @review.Updated_at.ToString("MMMM dd, yyyy")</p>
                            </div>

                            @if (Model.CurrentUserId == review.User_id)
                            {
                                <div class="d-flex align-items-start gap-3 ms-auto">
                                    @await Html.PartialAsync("_EditReviewPopUpForm", Tuple.Create(
                                       Model.Movie.Id,
                                       Model.Movie.Title,
                                       Model.Movie.Poster,
                                       review.Title,
                                       review.Text,
                                       $"/movies/{Model.Movie.Id}/review"))

                                    <form method="post" action="@Url.Action("DeleteReview", new { id = review.Id })">
                                        @await Html.PartialAsync("_PrimaryButton", Tuple.Create("Delete", "", "btn btn-danger btn-sm", "type=submit", "button"))
                                    </form>
                                </div>
                            }
                        </div>

                        <div id="review-view-@review.Id" class="review-view p-3">
                            <p>@review.Text</p>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>